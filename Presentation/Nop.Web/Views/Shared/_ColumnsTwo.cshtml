@{
    Layout = "_Root";
}
@{
    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog",
    StringComparison.InvariantCultureIgnoreCase) &&
    Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }

    //current manufacturer ID
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog",
    StringComparison.InvariantCultureIgnoreCase) &&
    Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer",
    StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }

    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product",
    StringComparison.InvariantCultureIgnoreCase) &&
    Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails",
    StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }
}



@* @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnBefore
}) *@


@* @await Component.InvokeAsync(typeof(WidgetViewComponent), new
{
widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation
})
@* *@
@* @await Component.InvokeAsync(typeof(ManufacturerNavigationViewComponent), new
{
currentManufacturerId =
currentManufacturerId
}) *@
@* @await Component.InvokeAsync(typeof(VendorNavigationViewComponent)) *@
@* @await Component.InvokeAsync(typeof(RecentlyViewedProductsBlockViewComponent), new { productThumbPictureSize = 64 })
*@
@* @await Component.InvokeAsync(typeof(PopularProductTagsViewComponent)) *@
@* @await Component.InvokeAsync(typeof(PollBlockViewComponent), new { systemKeyword = "LeftColumnPoll" }) *@
@* @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
*@

<div class="">
    @await RenderSectionAsync("Breadcrumb", false)

    <div class="w-1/2 mx-auto mt-4">
        @await Component.InvokeAsync(typeof(SearchBoxViewComponent))
    </div>

    <div class="grid grid-cols-12 px-4 md:px-16 mt-8 gap-2">
        <div class="col-span-12 md:col-span-4 lg:col-span-3 p-4 border bg-[#252a3363] border-gray-800 rounded-lg ">

            <div class="flex flex-col gap-4">
                <div class="hidden md:block">
                    @await Component.InvokeAsync(typeof(CategoryNavigationViewComponent), new
                        {
                            currentCategoryId = currentCategoryId,
                            currentProductId = currentProductId
                        })
                </div>
                @await RenderSectionAsync("CatalogFilters", false)
            </div>
        </div>
        <div class="col-span-12 md:col-span-8 lg:col-span-9 bg-[#252a3363] p-4 border border-gray-800 rounded-lg ">
            <h3 class="text-2xl font-semibold font-playfair mb-4">Products</h3>
            @RenderBody()
        </div>
    </div>
</div>
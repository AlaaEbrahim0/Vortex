@model NewsletterBoxModel
<div class="newsletter flex flex-row justify-center mb-4 w-full">
    <div class="flex flex-col gap-4">
        <strong class="block text-center text-xl text-white font-bold text-gray-900 sm:text-3xl">
            Subscribe to our newsletter
        </strong>
        <form class="newsletter-subscribe" id="newsletter-subscribe-block">
            <div class="flex flex-col gap-4 sm:flex-row lg:flex-col lg:items-start">
                <label for="newsletter-email" class="sr-only">@T("Newsletter.Email.Placeholder")</label>
                <input asp-for="NewsletterEmail" id="newsletter-email" class="w-full vortex-input shadow-sm"
                    placeholder="@T("Newsletter.Email.Placeholder")" aria-label="@T("Newsletter.Subscribe")" />

                <button type="button" id="newsletter-subscribe-button" class="vortex-button-1 w-full">
                    @T(Model.AllowToUnsubscribe ? "Newsletter.Options.Send" : "Newsletter.Options.Subscribe")
                </button>

                @if (Model.AllowToUnsubscribe)
                {
                    <div class="options mt-2">
                        <span class="subscribe">
                            <input id="newsletter_subscribe" type="radio" value="newsletter_subscribe"
                                name="newsletter_block" checked="checked" />
                            <label for="newsletter_subscribe">@T("Newsletter.Options.Subscribe")</label>
                        </span>
                        <span class="unsubscribe ml-4">
                            <input id="newsletter_unsubscribe" type="radio" value="newsletter_unsubscribe"
                                name="newsletter_block" />
                            <label for="newsletter_unsubscribe">@T("Newsletter.Options.Unsubscribe")</label>
                        </span>
                    </div>
                }
                @if (Model.DisplayCaptcha)
                {
                    <nop-captcha />
                }
            </div>
            <div class="newsletter-validation mt-2">
                <span id="subscribe-loading-progress text-white" style="display: none;"
                    class="please-wait">@T("Common.Wait")</span>
            </div>
        </form>
        <div class="newsletter-result mt-2 text-red-500" id="newsletter-result-block"></div>
    </div>

    <script asp-location="Footer">
        async function getCaptchaToken(action, reCaptchaPublicKey, isReCaptchaV3) {
            var recaptchaToken = '';
            if (isReCaptchaV3) {
                grecaptcha.ready(() => {
                    grecaptcha.execute(reCaptchaPublicKey, { action: action }).then((token) => {
                        recaptchaToken = token;
                    });
                });

                while (recaptchaToken == '') {
                    await new Promise(t => setTimeout(t, 100));
                }
            } else {
                recaptchaToken = $('#newsletter-subscribe-block .captcha-box textarea[name="g-recaptcha-response"').val();
            }

            return recaptchaToken;
        }

        async function newsletter_subscribe(subscribe) {
            var subscribeProgress = $("#subscribe-loading-progress");
            subscribeProgress.show();
            var captchaTok = '';
            if (@Model.DisplayCaptcha.ToString().ToLowerInvariant() == true) {
                captchaTok = await getCaptchaToken('SubscribeNewsletter', '@Model.ReCaptchaPublicKey', @Model.IsReCaptchaV3.ToString().ToLowerInvariant());
            }
            var postData = {
                subscribe: subscribe,
                email: $("#newsletter-email").val(),
                'g-recaptcha-response': captchaTok
            };
            addAntiForgeryToken(postData);
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.RouteUrl("SubscribeNewsletter"))",
                data: postData,
                success: function (data, textStatus, jqXHR) {
                    $("#newsletter-result-block").html(data.Result);
                    if (data.Success) {
                        $('#newsletter-subscribe-block').hide();
                        $('#newsletter-result-block').show();
                        $('#newsletter-result-block')
                    } else {
                        $('#newsletter-result-block').fadeIn("slow").delay(2000).fadeOut("slow");
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('Failed to subscribe.');
                },
                complete: function (jqXHR, textStatus) {
                    subscribeProgress.hide();
                }
            });
        }

        $(function () {
            $('#newsletter-subscribe-button').on('click', function () {
        @if (Model.AllowToUnsubscribe)
        {
            <text>if ($('#newsletter_subscribe').is(':checked')) {
                            newsletter_subscribe('true');
                                                                                                                                                                        } else {
                                newsletter_subscribe('false');
                                                                                                                                                                        }</text>
        }
        else
        {
            <text>newsletter_subscribe('true');</text>
        }
            });
            $("#newsletter-email").on("keydown", function (event) {
                if (event.keyCode == 13) {
                    $("#newsletter-subscribe-button").trigger("click");
                    return false;
                }
            });
        });
    </script>
</div>